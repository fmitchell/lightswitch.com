<?php

/**
 * HOOKS
 */

/**
 * Implements hook_menu().
 */
function bxdev_sales_menu() {
  $items['sales/add/business'] = array(
    'title' => t('Create a New Video Project'),
		'page callback' => 'bxdev_sales_create_business_page',
		'file path' => drupal_get_path('module','node'),
    'file' => 'node.pages.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

	$items['sales/add/project/%node'] = array(
	  'title' => t('Create a New Video Project'),
		'page callback' => 'bxdev_sales_create_project_page',
		'page arguments' => array(3),
		'file path' => drupal_get_path('module','node'),
    'file' => 'node.pages.inc',
	  'access arguments' => array('access content'),
	  'type' => MENU_CALLBACK,
	);

	$items['sales/get/form/%'] = array(
		'page callback' => 'bxdev_sales_get_form',
		'page arguments' => array(3),
		'file path' => drupal_get_path('module','user'),
    'file' => 'user.pages.inc',
    'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

	$items['sales/autocomplete/businesses'] = array(
		'page callback' => 'bxdev_sales_autocomplete_businesses',
	  'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

  return $items;
}

/**
 * Implements hook_node_insert().
 */
function bxdev_sales_node_insert($node) {
  switch($node->type){	
		case 'project':
			// log action
			watchdog('sales', 'New project: @title, nid: @nid', array('@title' => $node->title, '@nid' => $node->nid));
			break;
		
		case 'business':
			// get email
			$name = $node->field_email['und'][0]['email'];
			// load the user
			$account = user_load_by_name($name);
			// if the user exists
			if($account){
				// load their client profile
				$profile = profile2_load_by_user($account->uid, 'client');
				// set the new business node as a ref
				$profile->field_businesses_ref['und'][] = array('nid' => $node->nid);
				// save the profile
				profile2_save($profile);
			}else{
				// create a new user
				$new_account = new stdClass();
				$new_account->name = $name;
				$new_account->pass = user_password();
				$new_account->roles = array(2 => 'authenticated user', 7 => 'client');
				$account = user_save($new_account);
				// log action
				watchdog('sales', 'New client: @name, uid: @uid', array('@name' => $account->name, '@uid' => $account->uid));
				// create a new client profile
				$profile = profile_create(array('user' => $account, 'type' => 'client'));
				// set the new business node as a ref
				$profile->field_businesses_ref['und'][] = array('nid' => $node->nid);
				// save the profile
				profile2_save($profile);
			}
			// log action
			watchdog('sales', 'New business: @title, nid: @nid', array('@title' => $node->title, '@nid' => $node->nid));
			break;
	}
}

/**
 * Implementation of hook_preprocess_user_profile(). 
 */
function bxdev_sales_preprocess_user_profile(&$vars){
	$output = '';
	// if user has roles sales
	if(isset($vars['user']->roles[6])){
		$output .= views_embed_view('projects', 'block');
	}
	$vars['user_profile'] = $output;
	
}

/**
 * Implementation of hook_menu_local_tasks_alter().
 */
function bxdev_sales_menu_local_tasks_alter(&$data, $router_item, $root_path){
	// if user profile page
	if(arg(0) == 'user' && is_numeric(arg(1))){
		$user = user_load(arg(1));
		// check if user has client role (8)
		if(isset($user->roles[6])){
			// change "View" to "Events"
			$data['tabs'][0]['output'][0]['#link']['title'] = 'Projects';
			// change "Edit" to "Account info"
			$data['tabs'][0]['output'][1]['#link']['title'] = 'Account info';		
		}	
	}
}

/**
 * FORMS
 */

/**
 * Form builder: existing client
 */
function bxdev_sales_existing_business_form($form, $form_state){
	$form['existing_business'] = array(
		'#type' => 'textfield',
		'#title' => t('Existing business'),
		'#autocomplete_path' => 'sales/autocomplete/businesses',
		'#required' => TRUE,
	);
	
	$form['existing_business_nid'] = array(
	  '#type' => 'hidden',
	  '#default_value' => '',
	);	
	
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Continue >'),
	);
	
	return $form;	
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Form: bxdev sales existing client form
 */
function bxdev_sales_form_bxdev_sales_existing_business_form_alter(&$form, $form_state){
	$form['#action'] = '/sales/add/business#existing';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Form: project node form
 */
function bxdev_sales_form_project_node_form_alter(&$form, $form_state){	
	// do not modify on admin side
	if(arg(0) != 'node' && !is_numeric(arg(1))){
		
		// set the user reference uid
		$nid = arg(3);
		$form['field_project_business_ref']['und']['#default_value'] = $nid;
	
		// override original submit button
		$form['actions']['submit']['#value'] = t('Submit & View Profile >');
	
		// add additional submit button
		$form['actions']['return'] = array(
			'#type' => 'submit',
			'#value' => t('< Submit & Return to Form'),
			'#submit' => array('node_form_submit', 'bxdev_sales_project_node_form_submit'),
		);
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Form: business node form
 */
function bxdev_sales_form_business_node_form_alter(&$form, $form_state){
	$form['actions']['submit']['#submit'][] = 'bxdev_sales_form_business_node_form_submit';
}

// /**
//  * Implements hook_form_FORM_ID_alter().
//  * Form: user register form
//  */
// function bxdev_sales_form_user_register_form_alter(&$form, $form_state){
// 	if(user_access('administer users')){
// 		$form['actions']['submit']['#submit'][] = 'bxdev_sales_form_user_register_form_submit';
// 	}
// }
// 
// /**
//  * Form submit handler: user register
//  */
// function bxdev_sales_form_user_register_form_submit($form, &$form_state){
// 	dpm($form_state);
// }

/**
 * Form submit handler: existing client
 */
function bxdev_sales_existing_business_form_submit($form, &$form_state){
	$values = $form_state['values'];
	// redirect to the add project page
	$form_state['redirect'] = 'sales/add/project/' . $values['existing_business_nid'];
}

/**
 * Form submit handler: add project
 */
function bxdev_sales_project_node_form_submit($form, &$form_state){
	// send to client add form if "return to form" button was clicked
	if($form_state['clicked_button']['#value'] == '< Submit & Return to Form'){
		$form_state['redirect'] = 'sales/add/business';
	}
}

/**
 * Form submit handler: add business
 */
function bxdev_sales_form_business_node_form_submit($form, &$form_state){
	// only if adding new business, not editing
	if(arg(2) != 'edit'){
		$values = $form_state['values'];
		$form_state['redirect'] = 'sales/add/project/' . $values['nid'];
	}
}


/**
 * CUSTOM
 */

/**
 * Page callback: create client
 */
function bxdev_sales_create_business_page(){	
	drupal_add_js(drupal_get_path('module', 'bxdev_sales') . '/bxdev_sales.js');
	
	$output = '<h2><strong>Business Profile Info</strong> (step 1 of 2)</h2>';
	$output .= '<div class="client-select">';
	$output .= '<a href="#new" class="show-client-add-form">New business</a>';
	$output .= '<a href="#existing" class="show-client-existing-form">Existing business</a>';
	$output .= '</div>';
	
	$output .= '<div class="client-add-form">' . drupal_render(node_add('business')) . '</div>';
	
	$output .= '<div class="client-existing-form" style="display:none;">' . drupal_render(drupal_get_form('bxdev_sales_existing_business_form')) . '</div>';
	
	return $output;	
}

/**
 * Page callback: create project
 */
function bxdev_sales_create_project_page($user){
	$output = '<h2><strong>Project Info</strong> (step 2 of 2)</h2>';
	$output .= drupal_render(node_add('project'));

	return $output;
}

/**
 * Menu callback: clients autocomplete
 */
function bxdev_sales_autocomplete_businesses($string){
	$results = db_query("SELECT nid, title FROM {node} WHERE type = 'business' AND title LIKE :string", array(':string' => $string . '%'));
	if($results->rowCount() > 0){
		$items = array();
		foreach($results as $business){
			$items[$business->nid] = $business->title;
		}
		drupal_json_output($items);
	}
}






