<?php

/**
 * HOOKS
 */

/**
 * Implements hook_menu().
 */
function bxdev_sales_menu() {
  $items['sales/add/client'] = array(
    'title' => t('Create a New Video Project'),
		'page callback' => 'bxdev_sales_create_client_page',
		'file path' => drupal_get_path('module','user'),
    'file' => 'user.pages.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

	$items['sales/add/project/%user'] = array(
	  'title' => t('Create a New Video Project'),
		'page callback' => 'bxdev_sales_create_project_page',
		'page arguments' => array(3),
		'file path' => drupal_get_path('module','node'),
    'file' => 'node.pages.inc',
	  'access arguments' => array('access content'),
	  'type' => MENU_CALLBACK,
	);

	$items['sales/get/form/%'] = array(
		'page callback' => 'bxdev_sales_get_form',
		'page arguments' => array(3),
		'file path' => drupal_get_path('module','user'),
    'file' => 'user.pages.inc',
    'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

	$items['sales/autocomplete/clients'] = array(
		'page callback' => 'bxdev_sales_autocomplete_clients',
	  'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

  return $items;
}

/**
 * Implements hook_node_insert().
 */
function bxdev_sales_node_insert($node) {
	// if node type project
  if($node->type == 'project'){	
		// log action
		watchdog('sales', 'New project: @title, nid: @nid', array('@title' => $node->title, '@nid' => $node->nid));
	}	
}


/**
 * FORMS
 */

/**
 * Form builder: existing client
 */
function bxdev_sales_existing_client_form($form, $form_state){
	$form['existing_client'] = array(
		'#type' => 'textfield',
		'#title' => t('Existing client'),
		'#autocomplete_path' => 'sales/autocomplete/clients',
		'#required' => TRUE,
	);
	
	$form['existing_client_nid'] = array(
	  '#type' => 'hidden',
	  '#default_value' => '',
	);	
	
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Continue >'),
	);
	
	return $form;	
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Form: bxdev sales existing client form
 */
function bxdev_sales_form_bxdev_sales_existing_client_form_alter(&$form, $form_state){
	$form['#action'] = '/sales/add/client#existing';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Form: project node form
 */
function bxdev_sales_form_project_node_form_alter(&$form, $form_state){	
	// do not modify on admin side
	if(arg(0) != 'node' && !is_numeric(arg(1))){
		
		// set the user reference uid
		$uid = arg(3);
		$form['field_client']['und']['#default_value'] = $uid;
	
		// override original submit button
		$form['actions']['submit']['#value'] = t('Submit & View Profile >');
	
		// add additional submit button
		$form['actions']['return'] = array(
			'#type' => 'submit',
			'#value' => t('< Submit & Return to Form'),
			'#submit' => array('node_form_submit', 'bxdev_sales_project_node_form_submit'),
		);
	}
}

/**
 * Implements hook_form_profile2_form_alter().
 */
function bxdev_sales_form_profile2_form_alter(&$form, &$form_state){
	if($form['#form_id'] == 'user_register_form'){		
		// add our custom validation handler
		array_unshift($form['#validate'], 'bxdev_sales_form_user_register_validate');
		
		// add our custom submit handler
		$form['#submit'][] = 'bxdev_sales_form_user_register_submit';
		
		// make name and pass not required - we will set these values on validate
		$form['account']['name']['#required'] = FALSE;
		$form['account']['pass']['#required'] = FALSE;
		$form['account']['mail']['#required'] = FALSE;
		
		$form['account']['name']['#access'] = FALSE;
		$form['account']['pass']['#access'] = FALSE;
		$form['account']['mail']['#access'] = FALSE;
		$form['account']['status']['#access'] = FALSE;
		$form['account']['notify']['#access'] = FALSE;
		
		// remove the legend title
		$form['profile_client']['#title'] = '';				
	}
}

/**
 * Form submit handler: existing client
 */
function bxdev_sales_existing_client_form_submit($form, &$form_state){
	$values = $form_state['values'];
	// redirect to the add project page
	$form_state['redirect'] = 'sales/add/project/' . $values['existing_client_nid'];
}

/**
 * Form submit handler: add project
 */
function bxdev_sales_project_node_form_submit($form, &$form_state){
	// send to client add form if "return to form" button was clicked
	if($form_state['clicked_button']['#value'] == '< Submit & Return to Form'){
		$form_state['redirect'] = 'sales/add/client';
	}
}

/**
 * Submit handler: user register
 */
function bxdev_sales_form_user_register_submit(&$form, &$form_state){
	$uid = $form_state['values']['uid'];
	// log the action
	watchdog('sales', 'New client: @user, uid: @uid', array('@user' => $form_state['values']['name'], '@uid' => $uid));
	// redirect
	$form_state['redirect'] = 'sales/add/project/' . $uid;
}

/**
 * Form validation handler: user register
 */
function bxdev_sales_form_user_register_validate(&$form, &$form_state){
	$values = $form_state['values'];
	// auto-populate the username, password, and roles values
	form_set_value($form['account']['name'], $values['profile_client']['field_email']['und'][0]['email'], $form_state);
	form_set_value($form['account']['mail'], $values['profile_client']['field_email']['und'][0]['email'], $form_state);
	form_set_value($form['account']['pass'], user_password(), $form_state);
	form_set_value($form['account']['roles'], array(2 => TRUE, 7 => TRUE), $form_state);
}

/**
 * CUSTOM
 */

/**
 * Page callback: create client
 */
function bxdev_sales_create_client_page(){	
	drupal_add_js(drupal_get_path('module', 'bxdev_sales') . '/bxdev_sales.js');
	
	$output = '<h2><strong>Business Profile Info</strong> (step 1 of 2)</h2>';
	$output .= '<div class="client-select">';
	$output .= '<a href="#new" class="show-client-add-form">New client</a>';
	$output .= '<a href="#existing" class="show-client-existing-form">Existing client</a>';
	$output .= '</div>';
	
	$output .= '<div class="client-add-form">' . drupal_render(drupal_get_form('user_register_form')) . '</div>';
	
	$output .= '<div class="client-existing-form" style="display:none;">' . drupal_render(drupal_get_form('bxdev_sales_existing_client_form')) . '</div>';
	
	return $output;	
}

/**
 * Page callback: create project
 */
function bxdev_sales_create_project_page($user){	
	// check for uid argument
	$uid = arg(3);
	if(!is_numeric($uid)){
		return '<h2>Error: no client selected.</h2>';
	}

	$output = drupal_render(node_add('project'));

	return $output;
}

/**
 * Menu callback: clients autocomplete
 */
function bxdev_sales_autocomplete_clients($string){
	$results = db_query("SELECT field_data_field_name.field_name_value as name, profile.uid as uid FROM {field_data_field_name} INNER JOIN {profile} ON field_data_field_name.entity_id = profile.pid WHERE field_data_field_name.bundle = 'client' AND field_data_field_name.field_name_value LIKE :string", array(':string' => $string . '%'));
	if($results->rowCount() > 0){
		$items = array();
		foreach($results as $client){
			$items[$client->uid] = $client->name;
		}
		drupal_json_output($items);
	}
}






