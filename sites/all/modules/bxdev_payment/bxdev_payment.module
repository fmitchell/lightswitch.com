<?php

$GLOBALS['api_login_id'] = '2hQT4t8ua';
$GLOBALS['transaction_key'] = '3bNDCu4r334K9327';

module_load_include('inc', 'bxdev_payment', 'bxdev_payment.forms');


/**
 * HOOKS
 */

/**
 * Implements hook_views_api().
 */
function bxdev_payment_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_permission().
 */
function bxdev_payment_permission() {
  return array(
    'administer client payments' =>  array(
      'title' => t('Administer client payments'),
      'description' => t('Administer client payments'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bxdev_payment_menu() {
	
  $items['sales/add/cc'] = array(
    'title' => t('Create a New Video Project'),
		'page callback' => 'bxdev_payment_client_payment_step_one_page',
    'access arguments' => array('add new project'),
    'type' => MENU_CALLBACK,
  );

	$items['sales/add/cc-test'] = array(
	  'title' => t('Create a New Video Project'),
	  'page callback' => 'credit_card_test',
	  'access arguments' => array('add new project'),
	  'type' => MENU_CALLBACK,
	);
	
	$items['payment/get/profile/%'] = array(
		'page callback' => 'bxdev_payment_get_profile_page',
		'page arguments' => array(3),
		'access arguments' => array('add new project'),
		'type' => MENU_CALLBACK,
	);
	
	$items['node/%node/edit/payment'] = array(
		'page callback' => 'bxdev_payment_project_payment_page',
		'page arguments' => array(1),
		'access arguments' => array('add new project'),
		'type' => MENU_LOCAL_TASK,
	);
	
	$items['admin/client/%user/payments'] = array(
		'title' => t('Client Payments'),
		'page callback' => 'bxdev_payment_client_payment_page',
		'page arguments' => array(2),
		'access arguments' => array('administer client payments'),
		'type' => MENU_CALLBACK,
	);
	
	$items['admin/payment/remove/%/%'] = array(
		'page callback' => 'bxdev_payment_client_payment_remove',
		'page arguments' => array(3, 4),
		'access arguments' => array('administer client payments'),
		'type' => MENU_CALLBACK,
	);

  return $items;
}

/**
 * Implements hook_user_delete().
 */
function bxdev_payment_user_delete($account) {
  db_delete('users_auth')
    ->condition('uid', $account->uid)
    ->execute();
}


/**
 * CALLBACKS
 */

/**
 * AJAX callback: new / existing client switch
 */
function bxdev_payment_switch_client_state($form, $form_state){
	return $form;
}

/**
 * AJAX callback: get existing credit cards
 */
function bxdev_payment_get_existing_cc($form, $form_state){
	return $form['cc'];
}

/**
 * Page callback: get user profile
 */
function bxdev_payment_get_payment_profiles($uid){
	
	global $api_login_id;
	global $transaction_key;
	
	// require('AuthnetCIM.class.php');
	$cim = new AuthnetCIM($api_login_id, $transaction_key, TRUE);
	
	// get the user profile id
	$profile_id = db_select('users_auth', 'u')
		->fields('u', array('auth_token'))
		->condition('uid', $uid, '=')
		->execute()
		->fetchField();
	
	// if the profile exists
	if(!empty($profile_id)){
		
		$cim->setParameter('customerProfileId', $profile_id);
		$cim->getCustomerProfile();
		
		// get the raw xml response
		$xml = $cim->getXml();
		
		// get the payment profiles
		$payment_profiles = $xml->profile->paymentProfiles;
		
		if(!empty($payment_profiles)){		
			$items = array();
			foreach($payment_profiles as $payment_profile){
				$payment_id = (int) $payment_profile->customerPaymentProfileId;
				$items[$payment_id] = (string) $payment_profile->payment->creditCard->cardNumber;
			}		
			return $items;
		}		
	}
	return FALSE;
}

/**
 * Page callback: client payment step one
 */
function bxdev_payment_client_payment_step_one_page(){
	
	drupal_add_js(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.js');
	
	$output = '<h2><strong>Client Payment Info</strong> (step 1 of 3)</h2>';
	
	$output .= render(drupal_get_form('bxdev_payment_project_client_credit_card_form'));
	
	return $output;	
}

/**
 * Page callback: project payment
 */
function bxdev_payment_project_payment_page($node){
		
	$project = new Project($node->nid);
	
	drupal_add_css(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.css');
	drupal_add_js(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.js');
	
	// header information
	$output = '<h1>Payments</h1>';
	$output .= '<h2>Client: <strong>' . $project->client->field_name['und'][0]['value'] . '</strong></h2>';
	
	// credit card form
	$output .= render(drupal_get_form('bxdev_payment_project_payment_form', $node));
	
	// payment history
	$output .= '<h2>Payment History</h2>';
	$output .= '<div class="project-payment-history payment-history">' . views_embed_view('payments', 'payment_log', $project->project->nid, $project->client->uid) . '</div>';
	
	return $output;
}

/**
 * Page callback: client payment
 */
function bxdev_payment_client_payment_page($account){
	
	drupal_add_css(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.css');
	drupal_add_js(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.js');
	
	$output = '<a class="back" href="/admin/clients">&lt; Back to Clients</a>';
	
	$output .= '<div class="client-info">
	<h3>' . $account->field_name['und'][0]['value'] . '</h3>
	<p>Email: <a href="mailto:' . $account->mail . '">' . $account->mail . '</a></br>
	Phone: ' . $account->field_phone['und'][0]['value'] . '</p>
	</div>';
	
	$output .= '<div class="credit-card-wrap">';
	
	$payment_profiles = bxdev_payment_get_payment_profiles($account->uid);
	
	if($payment_profiles){
		$output .= '<div class="stored-cards"><h3>Stored credit cards</h3>';
		foreach($payment_profiles as $payment_profile_id => $card){
			$output .= '<div class="payment-profile" ><strong>' . $card . '</strong> <a href="" data-payment-profile="' . $payment_profile_id . '">remove</a></div>';
			$output .= '<div class="remove-popup" data-payment-profile="' . $payment_profile_id . '" style="display:none;">
			<h3>Are you sure you want to remove the credit card: <strong>' . $card . '</strong>?</h3>
			<p>This action cannot be undone.</p>
			<div class="buttons"><a class="btn-remove" href="/admin/payment/remove/' . $account->uid . '/' . $payment_profile_id . '">Remove credit card</a>
			<a class="btn-cancel" href="">Cancel</a></div>
			</div>';
		}
	}else{
		$output .= '<p>No stored credit cards.</p>';
	}
	
	$output .= '</div>';
	
	$output .= '<h3>Add new credit card</h3>';
	
	$output .= render(drupal_get_form('bxdev_payment_client_new_credit_card_form'));
	
	$output .= '</div>';
	
	$output .= '<div class="client-payment-history payment-history"><h3>Payment History</h3>' . views_embed_view('payments', 'payment_log_client', $account->uid) . '</div>';
	
	return $output;
}

/**
 * Menu callback: client remove credit card
 */
function bxdev_payment_client_payment_remove($uid, $payment_profile_id){
		
	$profile_id = bxdev_payment_get_auth_token($uid);
	
	// if the user does not have an auth token, stop and return
	if(!$profile_id){
		drupal_set_message('User does not have a payment profile', 'error');
		return;
	}
	
	global $api_login_id;
	global $transaction_key;
	
	$cim = new AuthnetCIM($api_login_id, $transaction_key, TRUE);
	
	$cim->setParameter('customerProfileId', $profile_id);
	$cim->setParameter('customerPaymentProfileId', $payment_profile_id);
	$cim->deleteCustomerPaymentProfile();
	
	// removal was successful
	if($cim->isSuccessful()){
		
		dpm($cim->getResponseSummary());				
	
	// transaction was not successful
	}else{
		drupal_set_message($cim->getResponseSummary(), 'error');
	}
	
	drupal_set_message('Credit card has been successfully removed.');
	drupal_goto('admin/client/' . $uid . '/payments');
}


/**
 * CUSTOM
 */

/**
 * Return user auth token, if it exists
 */
function bxdev_payment_get_auth_token($uid){
	// get the user profile id
	$profile_id = db_select('users_auth', 'u')
		->fields('u', array('auth_token'))
		->condition('uid', $uid, '=')
		->execute()
		->fetchField();
		
	return !empty($profile_id) ? $profile_id : FALSE;	
}

/**
 * Log a payment action
 */
function bxdev_payment_log_payment($nid, $uid, $payment_id, $transaction_id, $amount){
	db_insert('payment_log')
		->fields(array(
			'nid' => $nid,
			'uid' => $uid,
			'payment_id' => $payment_id,
			'transaction_id' => $transaction_id,
			'amount' => $amount,
		))
		->execute();
}








