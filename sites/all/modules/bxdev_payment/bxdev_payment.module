<?php

$GLOBALS['api_login_id'] = '2hQT4t8ua';
$GLOBALS['transaction_key'] = '3bNDCu4r334K9327';

module_load_include('inc', 'bxdev_payment', 'bxdev_payment.forms');


/**
 * HOOKS
 */

/**
 * Implements hook_menu().
 */
function bxdev_payment_menu() {
	
  $items['sales/add/cc'] = array(
    'title' => t('Create a New Video Project'),
		'page callback' => 'bxdev_payment_client_payment_step_one_page',
    'access arguments' => array('add new project'),
    'type' => MENU_CALLBACK,
  );

	$items['sales/add/cc-test'] = array(
	  'title' => t('Create a New Video Project'),
	  'page callback' => 'credit_card_test',
	  'access arguments' => array('add new project'),
	  'type' => MENU_CALLBACK,
	);
	
	$items['payment/get/profile/%'] = array(
		'page callback' => 'bxdev_payment_get_profile_page',
		'page arguments' => array(3),
		'access arguments' => array('add new project'),
		'type' => MENU_CALLBACK,
	);
	
	$items['node/%node/edit/payment'] = array(
		'page callback' => 'bxdev_payment_project_payment_page',
		'page arguments' => array(1),
		'access arguments' => array('add new project'),
		'type' => MENU_LOCAL_TASK,
	);

  return $items;
}

/**
 * Implements hook_user_delete().
 */
function bxdev_payment_user_delete($account) {
  db_delete('users_auth')
    ->condition('uid', $account->uid)
    ->execute();
}


/**
 * CUSTOM
 */

/**
 * AJAX callback: new / existing client switch
 */
function bxdev_payment_switch_client_state($form, $form_state){
	return $form;
}

/**
 * AJAX callback: get existing credit cards
 */
function bxdev_payment_get_existing_cc($form, $form_state){
	return $form['cc'];
}

/**
 * Page callback: get user profile
 */
function bxdev_payment_get_payment_profiles($uid){
	
	global $api_login_id;
	global $transaction_key;
	
	// require('AuthnetCIM.class.php');
	$cim = new AuthnetCIM($api_login_id, $transaction_key, TRUE);
	
	// get the user profile id
	$profile_id = db_select('users_auth', 'u')
		->fields('u', array('auth_token'))
		->condition('uid', $uid, '=')
		->execute()
		->fetchField();
	
	// if the profile exists
	if(!empty($profile_id)){
		
		$cim->setParameter('customerProfileId', $profile_id);
		$cim->getCustomerProfile();
		
		// get the raw xml response
		$xml = $cim->getXml();
		
		// get the payment profiles
		$payment_profiles = $xml->profile->paymentProfiles;
		
		if(!empty($payment_profiles)){		
			$items = array();
			foreach($payment_profiles as $payment_profile){
				$payment_id = (int) $payment_profile->customerPaymentProfileId;
				$items[$payment_id] = (string) $payment_profile->payment->creditCard->cardNumber;
			}		
			return $items;
		}		
	}
	return FALSE;
}

/**
 * Page callback: client payment step one
 */
function bxdev_payment_client_payment_step_one_page(){
	
	drupal_add_js(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.js');
	
	$output = '<h2><strong>Client Payment Info</strong> (step 1 of 3)</h2>';
	
	$output .= render(drupal_get_form('bxdev_payment_project_client_credit_card_form'));
	
	return $output;	
}

/**
 * Page callback: project payment
 */
function bxdev_payment_project_payment_page($node){
	drupal_add_css(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.css');
	drupal_add_js(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.js');
	$output = '<h1>Payments</h1>';
	$output .= render(drupal_get_form('bxdev_payment_project_payment_form', $node));
	return $output;
}

/**
 * Return user auth token, if it exists
 */
function bxdev_payment_get_auth_token($uid){
	// get the user profile id
	$profile_id = db_select('users_auth', 'u')
		->fields('u', array('auth_token'))
		->condition('uid', $uid, '=')
		->execute()
		->fetchField();
		
	return !empty($profile_id) ? $profile_id : FALSE;	
}





