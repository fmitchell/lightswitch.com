<?php

/**
 * Create database tables:
 *
 *   - users_documents
 */

require_once('dompdf/dompdf_config.inc.php');

module_load_include('inc', 'bxdev_document', 'bxdev_document.forms');

/**
 * HOOKS
 */

/**
 * Implements hook_views_api().
 */
function bxdev_document_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_permission().
 */
function bxdev_document_permission() {
  return array(
    'administer document settings' =>  array(
      'title' => t('Administer document settings'),
      'description' => t('Administer document settings.'),
    ),
	  'access documents' =>  array(
	    'title' => t('Access documents'),
	    'description' => t('Access documents.'),
	  ),
  );
}

/**
 * Implements hook_theme().
 */
function bxdev_document_theme($existing, $type, $theme, $path) {
  return array(
    'invoice_client' => array(
      'variables' => array('project' => NULL, 'line_items' => NULL, 'invoice_num' => NULL),
      'template' => 'bxdev_document_invoice_client',
			'path' => drupal_get_path('module', 'bxdev_document') . '/theme/templates',
    ),
	  'invoice_videographer' => array(
	    'variables' => array('project' => NULL, 'profile' => NULL, 'line_items' => NULL, 'invoice_num' => NULL),
	    'template' => 'bxdev_document_invoice_videographer',
			'path' => drupal_get_path('module', 'bxdev_document') . '/theme/templates',
	  ),
  );
}

/**
 * Implements hook_menu().
 */
function bxdev_document_menu() {
	
	$items['admin/documents/settings'] = array(
		'title' => t('Document settings'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('bxdev_document_settings_form'),
		'access arguments' => array('administer document settings'),
		'weight' => 50,
		'type' => MENU_NORMAL_ITEM,
	);
	
	$items['node/%node/edit/documents'] = array(
		'title' => t('Documents'),
		'page callback' => 'bxdev_document_project_documents_page',
		'page arguments' => array(1),
		'access callback' => 'bxdev_document_project_documents_access',
		'access arguments' => array(1),
		'weight' => 21,
		'type' => MENU_LOCAL_TASK,
	);
	
	$items['admin/client/%user/documents'] = array(
		'title' => t('Client Documents'),
		'page callback' => 'bxdev_document_client_documents_page',
		'page arguments' => array(2),
		'access arguments' => array('administer client payments'),
		'weight' => 11,
		'type' => MENU_LOCAL_TASK,
	);
	
	$items['user/%user/edit/documents'] = array(
		'title' => t('Documents'),
		'page callback' => 'bxdev_document_videographer_documents_page',
		'page arguments' => array(1),
		'access arguments' => array(1),
		'access callback' => 'bxdev_document_videographer_documents_access',
		'weight' => 11,
		'type' => MENU_LOCAL_TASK,
	);
	
	$items['get/document/%'] = array(
		'page callback' => 'bxdev_document_get_document_html',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
  return $items;
}

/**
 * Implements hook_user_delete().
 */
function bxdev_document_user_delete($account) {
  $results = db_select('users_documents', 'u')
		->fields('u', array('fid'))
		->condition('uid', $account->uid, '=')
		->execute();
		
	if($results->rowCount() > 0){
		foreach($results as $row){
			$file = file_load($row->fid);
			file_delete($file);
		}
	}
}

/**
 * Implements hook_file_delete().
 */
function bxdev_document_file_delete($file) {
  // Delete all information associated with the file.
  db_delete('users_documents')->condition('fid', $file->fid)->execute();
}


/**
 * CALLBACKS
 */

/**
 * Page callback: project documents
 */
function bxdev_document_project_documents_page($node){
	
	drupal_add_css(drupal_get_path('module', 'bxdev_document') . '/theme/css/bxdev_document.css');
	
	$project = new Project($node->nid);
	
	$output = '<div class="documents-wrap">';
	
	$output .= '<div class="block client-block">';
	$output .= '<h2>Client Documents</h2>';
	$output .= views_embed_view('documents', 'project_client', $project->project->nid, $project->client->uid);
	$output .= '</div>';
	
	$output .= '<div class="block">';
	$output .= '<h2>Videographer Documents</h2>';
	$output .= bxdev_document_get_videographer_w9_link($project->videographer->uid);
	$output .= views_embed_view('documents', 'videographer', $project->videographer->uid);
	$output .= '</div>';
	
	$output .= '</div>';
	
	return $output;
}

/**
 * Page callback: client documents
 */
function bxdev_document_client_documents_page($account){
	
	drupal_add_css(drupal_get_path('module', 'bxdev_document') . '/theme/css/bxdev_document.css');
	drupal_set_title('Client Documents');
	
	$output = '<a class="back" href="/admin/clients">&lt; Back to Clients</a>';
	
	$output .= '<div class="client-info">
	<h3>' . $account->field_name['und'][0]['value'] . '</h3>
	<p>Email: <a href="mailto:' . $account->mail . '">' . $account->mail . '</a></br>
	Phone: ' . $account->field_phone['und'][0]['value'] . '</p>
	</div>';
	
	$output .= '<div class="documents-wrap">';
	
	$output .= views_embed_view('documents', 'client_management', $account->uid);
	
	$output .= '</div>';
	
	return $output;	
}

/**
 * Page callback: videographer documents
 */
function bxdev_document_videographer_documents_page($account){
	
	drupal_add_css(drupal_get_path('module', 'bxdev_document') . '/theme/css/bxdev_document.css');
	drupal_set_title('Videographer Documents');
	
	$output .= '<div class="documents-wrap">';
	$output .= bxdev_document_get_videographer_w9_link($account->uid);
	$output .= views_embed_view('documents', 'videographer', $account->uid);
	$output .= '</div>';
	
	return $output;	
}

/**
 * Access callback: project documents
 */
function bxdev_document_project_documents_access($node){
	return $node->type == 'project' && user_access('access documents');
}

/**
 * Access callback: project documents
 */
function bxdev_document_videographer_documents_access($account){
	global $user;
	$account_role = bxdev_user_get_role($account->uid);
	return (user_access('pc') || $user->uid == $account->uid) && $account_role == 'videographer';
}


/**
 * CUSTOM
 */

/**
 * Create a pdf document
 */
function bxdev_document_create_pdf($html, $filename, $type, $path, $description, $uid = NULL, $nid = NULL){
	
	$destination = '';
	
	// determine the file destination (user type)
	switch($type){
		case 'client':
			$destination .= 'public://documents/client_docs/';
			break;
		
		case 'videographer':
			$destination .= 'public://documents/videographer_docs/';
			break;
	}
	
	$destination = $destination . $path . '/' . $filename;
	
	// add styling	
	$css = '<head><style type="text/css">' . file_get_contents(drupal_get_path('module', 'bxdev_document') . '/theme/css/bxdev_document_pdf.css') . '</style></head>';
		
	// add a header
	$header = '<img src="' . drupal_get_path('module', 'bxdev_document') . '/theme/images/logo.jpg' . '" />';
	
	// concatenate all parts
	$string = $css . $header . $html;
	
	// create the pdf object
	$dompdf = new DOMPDF();
	$dompdf->load_html($string);
	$dompdf->render();

	// generate the pdf string
	$pdf = $dompdf->output();
	
	// save the pdf to disk
	$file = file_save_data($pdf, $destination);
	
	// if file was successfully created
	if(!empty($file)){
		
		$fid = $file->fid;
		
		// if uid was supplied
		if(!is_null($uid)){
		
			db_insert('users_documents')
				->fields(array(
					'uid' => $uid,
					'fid' => $fid,
					'type' => $type,
					'nid' => !is_null($nid) ? $nid : NULL,
					'description' => $description,
				))
				->execute();			
		}
		
		// log the action
		watchdog('document', 'Document created: fid: ' . $fid . ', type: ' . $type);
		
		return $fid;
	}
	
	return FALSE;	
}

/**
 * Return the html of a prepopulated document
 */
function bxdev_document_get_document_html($name){
	$html = variable_get($name, '');
	$body = '<link href="/' . drupal_get_path('theme', 'bms') . '/css/bms_shadowbox.css" rel="stylesheet" type="text/css">';
	$body .= $html['value'];
	print token_replace($body);
}

/**
 * Returns a link to the videographer's w9 file
 */
function bxdev_document_get_videographer_w9_file($uid){
	
	$profile = profile2_load_by_user($uid, 'videographer');
	
	if(!empty($profile->field_videographer_w9['und'][0]['fid'])){
		
		$file = (object) $profile->field_videographer_w9['und'][0];
		return $file;
		
	}
	
	return FALSE;
}

/**
 * Returns a link to the videographer's w9 form, if it exists
 */
function bxdev_document_get_videographer_w9_link($uid){
	
	$profile = profile2_load_by_user($uid, 'videographer');
	
	if(!empty($profile->field_videographer_w9)){
		
		$file = $profile->field_videographer_w9['und'][0];
		$url = file_create_url($file['uri']);
		return '<div class="views-row"><div><strong>W9 form:</strong></div><div><a href="' . $url . '">' . $file['filename'] . '</a></div></div>';
	}
	
	return FALSE;
}

/**
 * Returns the last date a w9 reminder was sent, if any
 */
function bxdev_document_get_videographer_w9_reminder($uid, $nid){
	
	$result = db_select('users_w9_reminders', 'u')
		->fields('u')
		->condition('uid', $uid, '=')
		->condition('nid', $nid, '=')
		->orderBy('date', 'DESC')
		->execute()
		->fetchObject();
		
	if(!empty($result)){
		return $result;
	}
	
	return FALSE;
}




