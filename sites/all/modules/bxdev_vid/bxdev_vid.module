<?php

/**
 * HOOKS
 */

/**
 * Implements hook_menu().
 */
function bxdev_vid_menu() {
  $items['join-our-team'] = array(
    'title' => t('Videographer or Editor? Join Our Team!'),
    'page callback' => 'bxdev_vid_join_form',
    'access arguments' => array('access content'),
		'file path' => drupal_get_path('module', 'user'),
    'file' => 'user.pages.inc',
		'type' => MENU_NORMAL_ITEM,
  );

	$items['user/%user/info'] = array(
    'title' => t('lightswitch videographer directory'),
    'page callback' => 'bxdev_vid_user_view_page',
		'page arguments' => array(1),
    'access arguments' => array('pc'),
		'type' => MENU_CALLBACK,
	);
	
	$items['terms/get'] = array(
		'page callback' => 'bxdev_vid_terms_get_page',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

  return $items;
}

/**
 * Implements hook_block_info().
 */
function bxdev_vid_block_info() {
  // This example comes from node.module.
  $blocks['vid_sort']['info'] = t('Videographer sort');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bxdev_vid_block_view($delta = '') {
  $block = array();
	$output = '';
	
  switch ($delta) {
    case 'vid_sort':
			// get the uri
			$query = $_SERVER['REQUEST_URI'];
			// determine if we need to prepend ? or &
			$symbol = (strpos($query, '?') > 0) ? '&' : '?';
			// search for the string: '&sort_by='
			if(($pos = strpos($query, '&sort_by=')) > 0){
				$query = substr($query, 0, $pos);
			}
			// build the markup
			$output .= 'Sort by: ';
			$output .= '<a href="' . $query . $symbol . 'sort_by=field_rating_value&sort_order=DESC">Rating</a> | ';
			$output .= '<a href="' . $query . $symbol . 'sort_by=created_1&sort_order=DESC">Recent</a> | ';
			$output .= '<a href="' . $query . $symbol . 'sort_by=field_name_value&sort_order=ASC">ABC</a>';
      break;
  }

	$block['content'] = $output;
  return $block;
}

/**
 * Implements hook_preprocess_page().
 */
function bxdev_vid_preprocess_page(&$variables) {
	
	ini_set('display_errors', '1');
	
	// check if page is displaying videographer full node
	if(isset($variables['node'])){
		$variables['videographer'] = ($variables['node']->type == 'videographer') ? TRUE : FALSE;
	}else{
		$variables['videographer'] = FALSE;
	}
	
	// check if page is videographer directory
	if(arg(0) == 'videographers'){
		$_SESSION['vid_filters'] = $_SERVER['REQUEST_URI'];
	}
	
}


/**
 * FORMS
 */

/**
 * Implements hook_form_alter().
 */
function bxdev_vid_form_alter(&$form, &$form_state, $form_id) {
	// if editing a user
	if(!empty($form['#user'])){
		global $user;
		// get the logged in user's role
		$current_user_role = bxdev_user_get_role($user->uid);
		// get the user's role being edited
		$form_role = bxdev_user_get_role($form['#user']->uid);
		// if the user profile form and logged in user is 'pc' and user being edited is a 'videographer'
		if($form_id == 'user_profile_form' && $current_user_role == 'pc' && $form_role == 'videographer'){
			$form['#submit'][] = 'bxdev_vid_edit_redirect';
		}
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bxdev_vid_form_user_register_form_alter(&$form, &$form_state) {
	// hide / reposition user fields
	$form['account']['name']['#type'] = 'hidden';
	$form['account']['name']['#value'] = NULL;
	$form['account']['mail']['#title'] = t('Email');
	$form['account']['mail']['#description'] = '';
	$form['account']['mail']['#weight'] = -50;
	$form['account']['pass']['#type'] = 'hidden';
	$form['account']['pass']['#value'] = NULL;
	$form['field_name']['#weight'] = -49;
	$form['field_phone']['#weight'] = -48;
	$form['field_name']['und'][0]['value']['#required'] = TRUE;
	
	// modify validation / submit handlers
	array_unshift($form['#validate'], 'bxdev_vid_user_register_validate');
	$form['#submit'][0] = 'bxdev_vid_user_register_submit';
	
	// left / right wrappers
	$form['field_name']['#prefix'] = '<div class="left">';
	$form['profile_videographer']['field_skills']['#suffix'] = '</div><div class="right">';
	$form['profile_videographer']['field_resume']['#suffix'] = '</div>';
	$form['#attributes']['class'][] = 'clearfix';
	
	if(arg(0) == 'join-our-team'){
		unset($form['profile_videographer']['field_videographer_w9']);
	}
	
	dpm($form);
	
}

/**
 * Submit handler: user register
 */
function bxdev_vid_user_register_submit($form, &$form_state){
	$values = $form_state['values'];
	// create a new user
	// $user = new User($values['mail'], 'videographer', $values['field_name']['und'][0]['value'], $values['field_phone']['und'][0]['value']);
	$user = new User();
	$user->set_email($values['mail']);
	$user->set_full_name($values['field_name']['und'][0]['value']);
	$user->set_phone($values['field_phone']['und'][0]['value']);
	$user->set_role('videographer');
	$user->create();
	$user = $user->get_user();
	// send along the user object
	$form_state['user'] = $user;
	// redirect
	$form_state['redirect'] = 'node/31';
}

/**
 * Submit handler: videographer edit (by pc)
 */
function bxdev_vid_edit_redirect(&$form, &$form_state){
	$uid = arg(1);
	$form_state['redirect'] = 'user/' . $uid . '/info';
}

/**
 * Validation handler: user register
 */
function bxdev_vid_user_register_validate($form, &$form_state){
	$values = $form_state['values'];
	if(!empty($values['mail'])){
		// populate the username and password fields
		form_set_value($form['account']['name'], $values['mail'], $form_state);
		form_set_value($form['account']['pass'], user_password(), $form_state);
	}
	// if videographer has not checked the accept box
	if($values['profile_videographer']['field_videographer_terms']['und'][0]['value'] === 0){
		form_set_error('profile_videographer[field_videographer_terms][und', 'You must accept the Independent Contractor Agreement');
	}
}

/**
 * Form builder: add videographer
 */
function bxdev_vid_join_form(){
	$output = render(drupal_get_form('user_register_form'));
	return $output;
}


/**
 * CUSTOM
 */

/**
 * Page builder: videographer view
 */
function bxdev_vid_user_view_page($user){
	// load the profile
	$profile = profile2_load_by_user($user->uid, 'videographer');
	// get renderable array - profile
	$profile = field_attach_view('profile2', $profile, 'full');
	// get renderable array - user
	$user_render = field_attach_view('user', $user, 'full');
	// get the previous page
	$referer = (!empty($_SESSION['vid_filters'])) ? $_SESSION['vid_filters'] : '/videographers';
	
	drupal_set_title('lightswitch videographer directory');
	
	// build page markup
	$output = '';
	$output .= '<div class="videographer-back"><a href="' . $referer . '">&lt; Back to Videographer List</a></div>';
	
	$output .= '<div class="left">';
		$output .= '<div class="left-top">';
		
			$output .= '<div class="section top">';
				$output .= '<h2>' . $user->field_name['und'][0]['value'] . '</h2>';
				if(isset($profile['field_region']))	$output .= '<div class="category">' . $profile['field_region'][0]['#markup'] . '</div>';
				if(isset($profile['field_rating'])) $output .= '<div class="symbols"><div class="videographer-rating videographer-rating-' . $profile['field_rating'][0]['#markup'] . '"></div></div>';
			$output .= '</div>';
			
			$output .= '<div class="section bottom">';
				if(isset($user_render['field_phone'])) $output .= '<div class="phone">' . $user_render['field_phone'][0]['#markup'] . '</div>';
				$output .= '<div class="email"><a href="mailto:' . $user->mail . '">' . $user->mail . '</a></div>';
				if(isset($profile['field_address'])) $output .= '<div class="address">' . nl2br($profile['field_address'][0]['#markup']) . '</div>';
				if(isset($profile['field_resume'])) $output .= '<div class="resume">' . render($profile['field_resume']) . '</div>';
			$output .= '</div>';
			
		$output .= '</div>';
		
		$output .= '<div class="left-bottom">';
			$output .= '<div class="controls">
				<div class="edit"><a href="/user/' . $user->uid . '/edit/videographer">EDIT</a></div>
				<div class="delete"><a href="/user/' . $user->uid . '/cancel">DELETE</a></div>
			</div>';		
		$output .= '</div>';
		
	$output .= '</div>'; // end .left
	
	$output .= '<div class="right">';
	
		$output .= (!empty($profile['field_notes'][0]['#markup'])) ? '<div class="videographer-item videographer-notes"><h3>NOTES:</h3>' . strip_tags(nl2br(render($profile['field_notes']))) . '</div>' : '';
		$output .= (!empty($profile['field_skills'][0]['#markup'])) ? '<div class="videographer-item"><h3>Skills:</h3>' . nl2br(render($profile['field_skills'])) . '</div>' : '';
		$output .= (!empty($profile['field_transportation'][0]['#markup'])) ? '<div class="videographer-item"><h3>Transportation:</h3>' . nl2br(render($profile['field_transportation'])) . '</div>' : ''; 
		$output .= (!empty($profile['field_camera_type'][0]['#markup'])) ? '<div class="videographer-item"><h3>Camera type:</h3>' . nl2br(render($profile['field_camera_type'])) . '</div>' : '';
		$output .= (!empty($profile['field_audio'][0]['#markup'])) ? '<div class="videographer-item"><h3>Audio:</h3>' . nl2br(render($profile['field_audio'])) . '</div>' : '';
		$output .= (!empty($profile['field_lighting'][0]['#markup'])) ? '<div class="videographer-item"><h3>Lighting:</h3>' . nl2br(render($profile['field_lighting'])) . '</div>' : '';
	  $output .= (!empty($profile['field_equipment'][0]['#markup'])) ? '<div class="videographer-item"><h3>Equipment:</h3>' . nl2br(render($profile['field_equipment'])) . '</div>' : '';
		$output .= (!empty($profile['field_links_work'][0]['#markup'])) ? '<div class="videographer-item"><h3>Links to Examples of Work:</h3>' . nl2br(render($profile['field_links_work'])) . '</div>' : '';
		$output .= (!empty($profile['field_availability'][0]['#markup'])) ? '<div class="videographer-item"><h3>Availability:</h3>' . nl2br(render($profile['field_availability'])) . '</div>' : '';	
	
	$output .= '</div>'; // end .right
	
	return $output;
}

/**
 * Page callback: get terms
 */
function bxdev_vid_terms_get_page(){
	// load the terms page node
	$node = node_load(1031);
	print $node->body['und'][0]['value'];
}










