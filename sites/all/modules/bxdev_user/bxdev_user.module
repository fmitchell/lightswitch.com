<?php

/**
 * HOOKS
 */

/**
 * Implements hook_permission().
 */
function bxdev_user_permission() {
  return array(
    'view production details' =>  array(
      'title' => t('View production details'),
      'description' => t('View project production details.'),
    ),
	  'view production history' =>  array(
	    'title' => t('View production history'),
	    'description' => t('View project production history.'),
	  ),
  );
}



/**
 * Implements hook_menu().
 */
function bxdev_user_menu() {
  $items['user/%user/new'] = array(
    'title' => 'Create new user',
    'page callback' => 'bxdev_user_create_user_page',
    'access arguments' => array('administer users'),
		'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

	$items['user/change/password'] = array(
		'title' => t('Change password'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('bxdev_user_change_password_form'),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

  return $items;
}

/**
 * Implements hook_user_insert().
 */
function bxdev_user_user_presave(&$edit, $account, $category) {
	// if new user, set the first time login flag
	if(!isset($edit['data']['first_time_login'])){
  	$edit['data']['first_time_login'] = 1;
	}
}

/**
 * Implements hook_user_login().
 */
function bxdev_user_user_login(&$edit, $account) {
	// if first time login
	if($account->data['first_time_login']){
		drupal_set_message('This is your first time logging in. Please change your password!');
		drupal_goto('user/change/password');
	}
}

/**
 * Implements hook_mail().
 */
function bxdev_user_mail($key, &$message, $params) {
	global $base_url;
	switch($key){
		case 'videographer':
			$subject = t('Thanks for becoming a Videographer on Lightswitch!');
		  $body = 'You have been entered into the database.
		
			Here is your password: <strong>' . $params['pass'] . '</strong>';
			
		  $message['subject'] = $subject;
		  $message['body'][] = $body;
			break;
			
		case 'sales':
			$subject = t('Your Sales account details for Lightswitch');
		  $body = 'Click <a href="' . $base_url . '/user">' . $base_url . '/user</a> to login using the information below.
	
			Username: ' . $params['name'] . '<br />
			Password: ' . $params['pass'] . '';
		
		  $message['subject'] = $subject;
		  $message['body'][] = $body;
			break;
			
		case 'pc':
			$subject = t('Your Production Coordinator account details for Lightswitch');
		  $body = 'Click <a href="' . $base_url . '/user">' . $base_url . '/user</a> to login using the information below.

			Username: ' . $params['name'] . '<br />
			Password: ' . $params['pass'] . '';

		  $message['subject'] = $subject;
		  $message['body'][] = $body;
			break;
		
		
	}
}

/**
 * Implementation of hook_menu_local_tasks_alter().
 */
function bxdev_user_menu_local_tasks_alter(&$data, $router_item, $root_path){
	// if user profile page
	if(arg(0) == 'user' && is_numeric(arg(1))){
		$user = user_load(arg(1));
		
		if(isset($user->roles[4])){
			// change "View" to "Events"
			$data['tabs'][0]['output'][0]['#link']['title'] = 'Projects';
			// change "Edit" to "Account info"
			$data['tabs'][0]['output'][1]['#link']['title'] = 'Account info';		
		}else	if(isset($user->roles[5])){
			
		}else	if(isset($user->roles[6])){
			// change "View" to "Events"
			$data['tabs'][0]['output'][0]['#link']['title'] = 'Projects';
			// change "Edit" to "Account info"
			$data['tabs'][0]['output'][1]['#link']['title'] = 'Account info';		
		}else if(isset($user->roles[7])){
			
		}
	}
}

/**
 * Implementation of hook_preprocess_user_profile(). 
 */
function bxdev_user_preprocess_user_profile(&$vars){
	$output = '';
	// pc
	if(isset($vars['user']->roles[4])){
		$output .= views_embed_view('projects', 'page_1', $vars['user']->uid);
	// videographer
	}else if(isset($vars['user']->roles[5])){
		
	// sales
	}else if(isset($vars['user']->roles[6])){
		$output .= views_embed_view('projects', 'block');
	}
	$vars['user_profile'] = $output;	
}


/**
 * FORMS
 */

/**
 * Form builder: user create
 */
function bxdev_user_create_user_form($form, $form_state){
	$form['email'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Email'),
	  '#description' => t('<p>This will act as the username.</p><p>An email will automatically be sent to user with a temporary password.</p>'),
		'#required' => TRUE,
	);
	
	$form['name'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Full name'),
		// '#required' => TRUE,
	);
	
	$form['phone'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Phone'),
		// '#required' => TRUE,
	);
	
	$form['role'] = array(
	  '#type' => 'radios',
	  '#title' => t('Role'),
	  '#options' => array(
			'sales' => 'Sales',
			'pc' => 'Production coordinator',
		),
	  '#default_value' => 'sales',
	);
	
	$form['create'] = array(
	  '#type' => 'submit',
	  '#value' => t('Create user'),
	);	
	
	return $form;	
}

/**
 * Form builder: change password
 */
function bxdev_user_change_password_form($form, $form_state){
	$form['pass'] = array(
		'#type' => 'password_confirm',
	);

	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Change password'),
	);	
	
	return $form;
}

/**
 * Form submit handler: user create
 */
function bxdev_user_create_user_form_submit($form, &$form_state){
	$values = $form_state['values'];
	$email = $values['email'];
	$role  = $values['role'];
	$full_name = $values['name'];
	$phone = $values['phone'];
	
	// check if valid email address
	if(!valid_email_address($email)){
		drupal_set_message('Please enter a valid email address.', 'error');
		return;
	}
	
	// check if user exists
	$user = user_load_by_name($email);
	if(!$user){
		// create the user
		$user = new User($email, $role, $full_name, $phone);
		$user = $user->get_user();
		drupal_set_message('User ' . $user->name . ' has been created.');
	}else{
		drupal_set_message('User already exists. Please enter a new email address.', 'error');
	}
}

/**
 * Form submit handler: change password
 */
function bxdev_user_change_password_form_submit($form, &$form_state){
	global $user;
	// get the new password
	$pass = $form_state['values']['pass'];
	$edit = (array)$user;
	// save new password
	$edit['pass'] = $pass;
	// set the first time login flag to 0 (off)
	$edit['data']['first_time_login'] = 0;
	user_save($user, $edit);
	drupal_set_message('Your password has been saved!');
	watchdog('lightswitch', 'Changed password - first time login: @name, uid: @uid', array('@name' => $user->name, '@uid' => $user->uid));
	drupal_goto('user/' . $user->uid);
}

/**
 * CUSTOM
 */

/**
 * Page callback: create user
 */
function bxdev_user_create_user_page(){
	$output = '';	
	$output .= drupal_render(drupal_get_form('bxdev_user_create_user_form'));	
	return $output;
}

/**
 * Return user role
 */
function bxdev_user_get_role($uid){
	$user = user_load($uid);
	$roles = $user->roles;
	$role = 'authenticated user';
	if(array_key_exists(4, $roles)){
		$role = 'pc';
	}else if(array_key_exists(5, $roles)){
		$role = 'videographer';
	}else if(array_key_exists(6, $roles)){
		$role = 'sales';
	}else if(array_key_exists(7, $roles)){
		$role = 'client';
	}
	return $role;
}


/**
 * CLASS
 */

class User {
	
	var $password;
	var $user;
	var $name;
	var $mail;
	var $full_name;
	var $phone;
	var $roles;
	var $role;
	
	function __construct($email = NULL, $role = NULL, $full_name = NULL, $phone = NULL){
		$this->password = user_password();
		// if arguments have been supplied
		if(!is_null($email) && !is_null($role)){
			$this->set_email($email);
			$this->set_role($role);
			$this->set_full_name($full_name);
			$this->set_phone($phone);
			$this->create();
			$this->send();
			$this->log();
		}
	}
	
	function create(){
		$edit = array(
			'name' => $this->name,
			'mail' => $this->name,
			'pass' => $this->password,
			'roles' => $this->roles,
			'status' => 1,
		);
		if(isset($this->full_name)){
			$edit['field_name']['und'][0]['value'] = $this->full_name;
		}
		if(isset($this->phone)){
			$edit['field_phone']['und'][0]['value'] = $this->phone;
		}		
		$this->user = user_save(NULL, $edit);
	}
	
	function set_email($email){
		$this->name = $email;
		$this->mail = $email;
	}
	
	function set_full_name($full_name){
		$this->full_name = $full_name;
	}
	
	function set_phone($phone){
		$this->phone = $phone;
	}	
	
	function set_role($role){
		switch($role){
			case 'sales':
				$this->roles = array(2 => 'authenticated user', 6 => 'sales');
				$this->role = 'sales';
				break;
			
			case 'client':
				$this->roles = array(2 => 'authenticated user', 7 => 'client');
				$this->role = 'client';
				break;	
				
			case 'pc':
				$this->roles = array(2 => 'authenticated user', 4 => 'production coordinator');
				$this->role = 'pc';
				break;
		}	
	}
	
	function send(){
		drupal_mail('bxdev_user', $this->role, $this->user->mail, language_default(), array('name' => $this->user->name, 'pass' => $this->password));
	}
	
	function log(){
		switch($this->role){
			case 'sales':
				watchdog('lightswitch', 'New sales: @name, uid: @uid', array('@name' => $this->user->name, '@uid' => $this->user->uid));
				break;
				
			case 'client':
				watchdog('lightswitch', 'New client: @name, uid: @uid', array('@name' => $this->user->name, '@uid' => $this->user->uid));
				break;
				
			case 'pc':
				watchdog('lightswitch', 'New project coordinator: @name, uid: @uid', array('@name' => $this->user->name, '@uid' => $this->user->uid));
				break;
		}		
	}
	
	function get_user(){
		return $this->user;
	}
	
}







