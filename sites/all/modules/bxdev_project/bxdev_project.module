<?php


/**
 * HOOKS
 */

/**
 * Implements hook_menu().
 */
function bxdev_project_menu() {
  $items['project/%node/claim'] = array(
    'page callback' => 'bxdev_project_claim_callback',
		'page arguments' => array(1),
    'access arguments' => array('pc'),
    'type' => MENU_CALLBACK,
  );

	$items['project/%/reset/client'] = array(
		'page callback' => 'bxdev_project_reset_client_callback',
		'page arguments' => array(1),
		'access arguments' => array('pc'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/%/approve'] = array(
		'page callback' => 'bxdev_project_approve_callback',
		'page arguments' => array(1),
		'access arguments' => array('client'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/%node/download/doc'] = array(
		'page callback' => 'bxdev_project_download_production_details',
		'page arguments' => array(1),
		'access arguments' => array('view production details'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/%/photos'] = array(
		'title' => t('Photo review'),
		'page callback' => 'bxdev_project_photo_approval_page',
		'page arguments' => array(1),
		'access arguments' => array('view project photos'),
		'type' => MENU_CALLBACK,
	);
	

  return $items;
}

/**
 * Implements hook_mail().
 */
function bxdev_project_mail($key, &$message, $params) {
	global $base_url;
	switch($key){
		case 'comment':
			$subject = t('A new comment has been posted in @title', array('@title' => $params['project_title']));
			$body = 'A new comment has been posted in ' . $params['project_title'] . '<br><br>';
			$body .= 'Click here to view the project:<br>' . $params['project_link'] . '<br><br>';
			$body .= 'The comment was posted at: ' . $params['comment_date'] . '<br><br>';
			$body .= 'Posted by: ' . $params['comment_author'] . '<br><br>';
			$body .= 'Comment:<br>' . nl2br($params['comment']) . '<br><br>';			
			
			$message['subject'] = $subject;
			$message['body'][] = $body;
			break;
			
		case 'approved':
			$subject = t('Congratulations, your @title video has been approved!', array('@title' => $params['project_title']));
			$body = 'You will be receiving the final video formats of your lightswitch video within 2-3 business days.<br><br>';
			$body .= 'As always, let us know if you have any questions or concerns. Thank you for your business!.<br><br>';
			$body .= 'Sincerely,<br>';
			$body .= $params['pc']['full_name'] . '<br>';
			$body .= $params['pc']['email'] . '<br>';
			$body .= $params['pc']['phone'];

			$message['subject'] = $subject;
			$message['body'][] = $body;
			break;

	}
	$message['headers']['Content-Type'] = 'text/html; charset=UTF-8';
}

/**
 * Implements hook_node_insert().
 */
function bxdev_project_node_insert($node) {
  switch($node->type){	
		case 'project':
			$full_name = $node->field_business_contact_name['und'][0]['value'];
			$phone = $node->field_phone['und'][0]['value'];
			$business = node_load($node->field_project_business_ref['und'][0]['nid']);
			$client = user_load($business->field_client_ref['und'][0]['uid']);
			$edit = (array)$client;
			$edit['field_name']['und'][0]['value'] = $full_name;
			$edit['field_phone']['und'][0]['value'] = $phone;
			user_save($client, $edit);
			// log action
			watchdog('lightswitch', 'New project: @title, nid: @nid', array('@title' => $node->title, '@nid' => $node->nid));
			$project = new Project($node->nid);
			$project->log('admin', 'Project added');
			$project->set_status(1);
			break;
			
		case 'comment':
			$project = new Project($node->field_project_ref['und'][0]['nid']);
			// if the first comment
			if(count($project->comments) == 1){
				if(!$project->overridden){
					// set the status to 4 - Version 1 to Client
					$project->set_status(4);
					$project->log('admin', 'Project auto updated to 4 - Version 1 to Client');
				}
				$user = new User();
				$user->load($project->client->uid);
				$user->send_client_project_login($project->project->nid);
			}else{
				// notify all appropriate users
				$project->comment_notify($node->nid);
			}
			$client_comments = array();
			// count client's comments
			foreach($project->comments as $comment){
				if($comment->uid == $project->client->uid){
					$client_comments[] = $comment->nid;
				}
			}
			// if client has posted at least one comment, set status to 5 - Revision
			if(!empty($client_comments) && !$project->overridden){
				$project->set_status(5);
				$project->log('admin', 'Project auto updated to 5 - Revision');
			}
	}
}

/**
 * Implements hook_node_update().
 */
function bxdev_project_node_submit(&$node, $form, &$form_state) {
	$values = $form_state['values'];
	switch($node->type){
		case 'project':
		
		  $project = new Project($node->nid);
			$old_status = $project->get_status();			
			$new_status = $values['field_status']['und'][0]['value'];
			
			// detect if manually overridden
			if($old_status !== $new_status){
				$node->field_status_date['und'][0]['value'] = time();
				$node->field_status_override['und'][0]['value'] = 1;
			}
			
			// check if project is currently status 2 (claimed), a videographer has been assigned, and project is not manually overridden
			if($project->get_status() == 2 && !empty($node->field_videog_ref['und']) && $node->field_status_override['und'][0]['value'] !== 1){
				// set status to 3 (assigned)
				$node->field_status['und'][0]['value'] = 3;
				$project->log('admin', 'Project auto updated to 3 - Assigned');
			}
			break;			
	}
}

/**
 * Implements hook_preprocess_node().
 */
function bxdev_project_preprocess_node(&$vars){
	if($vars['type'] == 'project'){
		
		// include for the node add form
		module_load_include('inc', 'node', 'node.pages');
		
		// load up some variables
		global $user;
		$role = bxdev_user_get_role($user->uid);
		$profile = '';		
		$nid = $vars['nid'];
		$project = new Project($nid);
		$comment_permission = TRUE;
		
		// if videographer role, get the profile
		if($role == 'videographer'){
			$profile = profile2_load_by_user($user->uid, 'videographer');
		}
		
		// send the objects to the tpl
		$vars['business'] = $project->business;
		$vars['client'] = $project->client;
		$vars['pc'] = $project->pc;
		$vars['videographer'] = $project->videographer;
		
		// check if project has been approved
		$vars['approved'] = $vars['field_approved'][0]['value'];
		
		// check commenting permissions
		if($role == 'videographer' && !$profile->field_post_comments['und'][0]['value']){
			$comment_permission = FALSE;
		}
		$vars['comment_permission'] = $comment_permission;
		
		// get the comment add form
		$vars['comment_form'] = drupal_render(node_add('comment'));
		
		// get the comments
		$vars['comments'] = views_embed_view('comments', 'block');
		
		// approve button
		if(bxdev_user_get_role($user->uid) == 'client'){
			$vars['approve_button'] = '<span class="approve-or">or</span> <a class="approve-btn" href="/project/' . $nid . '/approve">Approve</a>';
		}
		
		// production history
		if(user_access('view production history')){
			$vars['production_history'] = bxdev_project_get_production_log($nid);
		}
		
	  // if user is sales or pc, allow edit / delete
		if(user_access('sales') || user_access('pc')){
			$operations = '<div class="edit"><a href="/node/' . $vars['node']->nid . '/edit">Edit</a></div>';
			$operations .= '<div class="delete"><a href="/node/' . $vars['node']->nid . '/delete">Delete</a></div>';
			$vars['operations'] = $operations;
		}
		
		$project_full = node_view($project->project, 'full');
		$project_teaser = node_view($project->project, 'teaser');
		
		// dpm($project_full);
		
		// photos
		// get approved photos
		$results = db_query("SELECT fid FROM {project_photos_approval} WHERE nid = :nid", array(':nid' => $nid));
		$approved_photos = array();
		if($results->rowCount() > 0){
			foreach($results as $row){
				$approved_photos[] = $row->fid;
			}
		}
		
		if(!empty($approved_photos)){
			$photos = array();
			foreach($project_full['field_project_photos'] as $key => $value){
				if(is_numeric($key)){
					// dpm($value);
					if(in_array($value['#item']['fid'], $approved_photos)){
						$photos_full .= theme($value['#theme'], $value);
						$photos_teaser .= theme($project_teaser['field_project_photos'][$key]['#theme'], $project_teaser['field_project_photos'][$key]);
						// $photos['full'][] = $project_full['field_project_photos'][$key];
						// $photos['teaser'][] = $project_teaser['field_project_photos'][$key];
					}
				}
			}
			// dpm($photos);
			
			$vars['photos_full'] = $photos_full;
			$vars['photos_teaser'] = $photos_teaser;
		}
		
		// if(!empty($project_full['field_project_photos'])){
		// 	$photos = array();
		// 	foreach($project_full['field_project_photos'] as $key => $value){
		// 		if(is_numeric($key)){
		// 			$photos['full'][] = $project_full['field_project_photos'][$key];
		// 			$photos['teaser'][] = $project_teaser['field_project_photos'][$key];
		// 		}
		// 	}
		// 	// dpm($photos);
		// 	$vars['photos'] = '<a href="/project/' . $nid . '/photos">View photos</a>';
		// }
	}
}

/**
 * Implements hook_preprocess_page().
 */
function bxdev_project_preprocess_page(&$vars){
	drupal_add_js('Drupal.behaviors.password = function () {};', array('type' => 'inline', 'scope' => 'footer'));
	$vars['no_title'] = FALSE;
	if(isset($vars['node'])){
		if($vars['node']->type == 'business' || $vars['node']->type == 'project'){
			$vars['no_title'] = TRUE;
		}		
	}
}


/**
 * FORMS
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bxdev_project_form_comment_node_form_alter(&$form, $form_state){
	// change submit button
	$form['actions']['submit']['#value'] = t('Post Comment');
	// hide the title field
	$form['title']['#type'] = 'hidden';
	$form['title']['#value'] = NULL;
	// hide the comment label
	$form['field_comment']['und'][0]['value']['#title'] = '';
	$form['field_comment']['und'][0]['value']['#default_value'] = t('Type your comments here...');
	// hide the project ref field
	$form['field_project_ref']['#type'] = 'hidden';
	// add custom validate handler
	array_unshift($form['#validate'], 'bxdev_project_comment_node_form_validate'); 
	// add custom submit handler
	$form['actions']['submit']['#submit'][] = 'bxdev_project_comment_node_form_submit';
}

/**
 * Form builder: photo approval
 */
function bxdev_project_photo_approval_form($form, $form_state){
	$form = array();
	$node = node_load(arg(1));
	$render = node_view($node, 'teaser');
	$full = node_view($node, 'full');
	
	// if photos have been assigned
	if(!empty($render['field_project_photos'])){
		
		// get stored values
		$results = db_query("SELECT fid FROM {project_photos_approval} WHERE nid = :nid", array(':nid' => $node->nid));
		$defaults = array();
		if($results->rowCount() > 0){
			foreach($results as $row){
				$defaults[] = $row->fid;
			}
		}
		
		// build the images and checkboxes
		foreach($render['field_project_photos'] as $key => $value){
			if(is_numeric($key)){
				// dpm($value);
				$path = file_create_url($full['field_project_photos'][$key]['#item']['uri']);
				$form['approve'][$value['#item']['fid']] = array(
				  '#type' => 'checkbox',
				  '#title' => t('Approve'),
				  '#default_value' => in_array($value['#item']['fid'], $defaults),
					'#prefix' => '<div class="photo-wrap"><a rel="shadowbox" href="' . image_style_url('approval', $full['field_project_photos'][$key]['#item']['uri']) . '">' . theme($value['#theme'], $value) . '</a>',
					'#suffix' => '</div>',
				);				
			}
		}
		
		// submit button
		$form['submit'] = array(
		  '#type' => 'submit',
		  '#value' => t('Submit'),
		);		
		
	// photos have not been assigned
	}else{
		$form['no_photos'] = array(
			'#markup' => t('No photos assigned.'),
		);
	}
	
	return $form;
}

/**
 * Form submit handler: comment node form
 */
function bxdev_project_comment_node_form_submit($form, &$form_state){
	$form_state['redirect'] = substr($_SERVER['REQUEST_URI'], 1);
}

/**
 * Form submit handler: photo approval form
 */
function bxdev_project_photo_approval_form_submit($form, &$form_state){
	$nid = arg(1);
	$values = $form_state['values'];
	// clear all values for current node
	db_delete('project_photos_approval')
		->condition('nid', $nid)
		->execute();
	// store each new value
	foreach($values as $key => $value){
		if(is_numeric($key)){
			if($value){
				db_insert('project_photos_approval')
					->fields(array(
						'nid' => $nid,
						'fid' => $key,
					))
					->execute();
			}
		}
	}
	drupal_set_message('Photo approvals have been updated.');
}

/**
 * Form validation handler: comment node form
 */
function bxdev_project_comment_node_form_validate($form, &$form_state){
	$values = $form_state['values'];
	// set the node title
	$comment = $values['field_comment']['und'][0]['value'];
	$title = substr($comment, 0, 100);
	form_set_value($form['title'], $title, $form_state);
	// set the project ref
	$project_nid = arg(1);
	$form['field_project_ref']['#parents'] = array('field_project_ref', 'und', 0, 'nid');
	form_set_value($form['field_project_ref'], $project_nid, $form_state);		
}

/**
 * Form validation handler: photo approval form
 */
function bxdev_project_photo_approval_form_validate($form, &$form_state){
	$values = $form_state['values'];
	$count = 0;
	// cycle through each photo and allow no more than eight choices
	foreach($values as $key => $value){
		if(is_numeric($key)){
			$count += $value;
		}
	}
	// check if greater than 8
	if($count > 8){
		form_error($form, 'A maximum of 8 choices can selected.');
		return FALSE;
	}
}


/**
 * CUSTOM
 */

/**
 * Page callback: photo approval
 */
function bxdev_project_photo_approval_page($nid){
	$project_path = drupal_lookup_path('alias', 'node/' . $nid);
	$output = '<a href="/' . $project_path . '">Back to project</a>';
	$output .= render(drupal_get_form('bxdev_project_photo_approval_form'));
	return $output;
}

/**
 * Menu callback: project claim
 */
function bxdev_project_claim_callback($node){
	global $user;
	$node->field_pc_ref['und'][0]['uid'] = $user->uid;
	node_save($node);
	$project = new Project($node->nid);
	if(!$project->overridden){
		$project->set_status(2);
		$project->log('admin', 'Project auto updated to 2 - Claimed');
	}
	drupal_goto('projects/master');
}

/**
 * Menu callback: reset client
 */
function bxdev_project_reset_client_callback($nid){
	$project = new Project($nid);
	$user = new User();
	$user->load($project->client->uid);
	$user->send_client_project_login($nid);
	drupal_set_message('Client login information has been reset and sent to the user.');
	drupal_goto($project->project_path);
}

/**
 * Menu callback: project approve
 */
function bxdev_project_approve_callback($nid){
	$project = new Project($nid);
	// set the approved value to 1 (TRUE)
	$project->project->field_approved['und'][0]['value'] = 1; 
	// save the node
	node_save($project->project);
	if(!$project->overridden){
		// set the status to 6 - Approved
		$project->set_status(6);
	}
	// send emails
	$project->send_approved();
	// log the action
	$project->log('admin', 'Project approved');
	// print a success message
	drupal_set_message('Project ' . $project->project->title . ' has been approved!');
	// redirect back to project
	drupal_goto($project->project_path);
}

/**
 * Menu callback: download production details
 */
function bxdev_project_download_production_details($node){
	
	header( 'Pragma: public' ); 
	header( 'Content-Type: application/msword' ); 
	header( 'Content-Disposition: attachment; filename="' . str_replace(' ', '_', strtolower($node->title)) .  '_production_details.doc"' );
	
	$output = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">';
	$output .= '<style type="text/css">
		body {font-family: Arial; font-size: 20px;}
		.field {margin-bottom: 20px;}
		.field-label {font-weight: bold;}
	</style>';
	$output .= '<body>';
	$output .= '<h1>' . $node->title . ' Production Details</h1>';
	$output .= render(field_view_field('node', $node, 'field_shoot_date'));
	$output .= render(field_view_field('node', $node, 'field_voice_over'));
	$output .= render(field_view_field('node', $node, 'field_voice_over_gender'));
	$output .= render(field_view_field('node', $node, 'field_owner_interview'));
	$output .= render(field_view_field('node', $node, 'field_script_notes'));
	$output .= render(field_view_field('node', $node, 'field_logo'));
	$output .= render(field_view_field('node', $node, 'field_photos'));
	$output .= render(field_view_field('node', $node, 'field_features_include'));
	$output .= render(field_view_field('node', $node, 'field_features_avoid'));
	$output .= render(field_view_field('node', $node, 'field_unique'));
	$output .= '</body>';
	$output .= '</html>';	
	
	print $output;	
}

/**
 * Return the production log per node
 */
function bxdev_project_get_production_log($nid){
	$results = db_query("SELECT DATE_FORMAT(date, '%c/%e/%y %l:%i%p') as date, message, user_uid FROM {production_log} WHERE project_nid = :nid", array(':nid' => $nid));
	$output = '';
	if($results->rowCount() > 0){
		foreach($results as $result){
			$user = user_load($result->user_uid);
			$output .= '<div class="log-row">';
			$output .= strtolower($result->date) . ': ' . $user->field_name['und'][0]['value'] . '<br />';
			$output .= $result->message;
			$output .= '</div>';
		}
	}
	return $output;
}


/**
 * CLASSES
 */

class Project {
	
	var $project;
	var $project_path;
	var $business;
	var $client;
	var $videographer;
	var $pc;
	var $sales;
	var $comments;
	var $overridden;
	
	function __construct($nid){
		
		$project = node_load($nid);
		$business = node_load($project->field_project_business_ref['und'][0]['nid']);
		$client = user_load($business->field_client_ref['und'][0]['uid']);
		$sales = user_load($project->uid);
		$pc = '';
		$videographer = '';
		
		if(!empty($project->field_pc_ref)){
			$pc = user_load($project->field_pc_ref['und'][0]['uid']);
		}
		
		if(!empty($project->field_videog_ref)){
			$videographer = user_load($project->field_videog_ref['und'][0]['uid']);
		}
		
		$this->project = $project;
		$this->project_path = drupal_lookup_path('alias', 'node/' . $this->project->nid);
		$this->business = $business;
		$this->client = $client;
		$this->sales = $sales;		
		$this->pc = $pc;
		$this->videographer = $videographer;		
		$this->comments = $this->get_comments();
		$this->overridden = $project->field_status_override['und'][0]['value'];
	}
	
	function log($type, $message){
		global $user;
		$role = bxdev_user_get_role($user->uid);
		db_insert('production_log')
			->fields(array(
				'project_nid' => $this->project->nid,
				'business_nid' => $this->business->nid,
				'client_uid' => $this->client->uid,
				'user_uid' => $user->uid,
				'user_role' => $role,
				'type' => $type,
				'message' => $message,
			))
			->execute();
	}
	
	function set_status($id){
		$this->project->field_status['und'][0]['value'] = $id;
		$this->project->field_status_date['und'][0]['value'] = time();
		node_save($this->project);
	}
	
	function get_status(){
		return $this->project->field_status['und'][0]['value'];
	}
	
	function get_users(){
		$users = array();
		if(!empty($this->client)){
			$users[$this->client->uid] = $this->client;
		}
		if(!empty($this->pc)){
			$users[$this->pc->uid] = $this->pc;
		}
		if(!empty($this->videographer)){
			$users[$this->videographer->uid] = $this->videographer;
		}
		if(!empty($this->sales)){
			$users[$this->sales->uid] = $this->sales;
		}
		return $users;		
	}
	
	function comment_notify($cid){
		global $base_url;
		$project_link = $base_url . '/' . $this->project_path;
		$comment = node_load($cid);
		$owner_uid = $comment->uid;
		$users = $this->get_users();
		unset($users[$owner_uid]);
		foreach($users as $uid => $user){
			$comment_author = user_load($comment->uid);
			$comment_author = $comment_author->field_name['und'][0]['value'];
			$params = array();
			$params['project_title'] = $this->project->title;
			$params['project_link'] = $project_link;
			$params['comment_author'] = $comment_author;
			$params['comment_date'] = date('m-d-Y', $comment->created);
			$params['comment'] = $comment->field_comment['und'][0]['value'];
			drupal_mail('bxdev_project', 'comment', $user->mail, language_default(), $params);
		}
	}

	function get_comments(){
		$comments = array();
		$results = db_query("SELECT entity_id FROM {field_data_field_project_ref} WHERE field_project_ref_nid = :nid", array(':nid' => $this->project->nid));
		if($results->rowCount() > 0){
			foreach($results as $result){
				$comment = node_load($result->entity_id);
				$comments[$comment->nid] = $comment;
			}
		}
		return $comments;
	}

	function send_client_login(){
		drupal_mail('bxdev_project', 'first_comment', $this->client->mail, language_default(), array('project_path' => $this->project_path));
		$this->log('admin', 'Client sent login information');
	}
	
	function send_approved(){
		global $base_url;
		$project_link = $base_url . '/' . $this->project_path;
		$emails = $this->pc->mail . ', ' . $this->sales->mail . ', ' . $this->client->mail;
		$params = array(
			'project_title' => $this->project->title,
			'project_link' => $project_link,
		);
		$params = array(
			'project_title' => $this->project->title,
			'project_link' => $project_link,			
			'pc' => array(
				'full_name' => $this->pc->field_name['und'][0]['value'],
				'email' => $this->pc->mail,
				'phone' => $this->pc->field_phone['und'][0]['value'],
			),
		);		
		drupal_mail('bxdev_project', 'approved', $emails, language_default(), $params);
	}

}
















